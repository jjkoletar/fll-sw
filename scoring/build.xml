<project name="fll-sw" default="compile">

  <!-- ===================== Property Definitions =========================== -->

  <!-- load build specific properties first -->
  <property file="build.properties" />

  <property file="build.properties" />


  <property name="app.name"        value="${ant.project.name}"/>
  <property name="app.version"     value="2.6"/>
                                   
  <property name="dir.build"       value="build"/>
  <property name="tomcat"     value="jakarta-tomcat-4.1.27-LE-jdk14"/>
  <property name="dir.tomcat"      value="${dir.build}/${tomcat}"/>
  <property name="dir.deploy"      value="${dir.tomcat}/webapps/${app.name}"/>
  
  <property name="dir.dist"        value="dist"/>
  <!--property name="dir.web"         value="${dir.build}/web" /-->
  <property name="dir.web"         value="${dir.build}/tomcat/webapps/${app.name}"/>
  <property name="dir.bin"         value="${dir.build}/bin" />
  <property name="dir.lib"         value="lib" />
  <property name="dir.src"         value="src" />
  <property name="dir.tmp"         value="tmp" />
  <property name="web.config"      value="web-default.xml" />
  <property name="dist.web.config" value="web-default.xml" />

  <!--  ==================== Compilation Control Options ==================== -->

  <!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

  -->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="false"/>



  <!-- ==================== External Dependencies =========================== -->


  <!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
  of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat 4
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

  -->

  <!-- Dummy external dependency -->
  <!--
  <property name="foo.jar"
  value="/path/to/foo.jar"/>
  -->


  <!-- ==================== Compilation Classpath =========================== -->

  <!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

  -->

  <path id="application.classpath">
    <pathelement location="${dir.lib}/JonsInfra-0.2.jar"/>
    <pathelement location="${dir.lib}/junit-3.8.1.jar"/>
    <pathelement location="${dir.lib}/log4j-1.2.8.jar"/>
    <pathelement location="${dir.lib}/mysql-connector-java-3.0.16-ga-bin.jar"/>
    <pathelement location="${dir.lib}/xercesImpl.jar"/>
    <pathelement location="${dir.lib}/xmlParserAPIs.jar"/>
  </path>

  <path id="compile.classpath">
    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <path refid="application.classpath" />

    <pathelement location="${dir.lib}/commons-lang-2.0.jar" />
    <pathelement location="${dir.lib}/taglibs-string.jar" />
    <pathelement location="${dir.lib}/uptag.jar"/>

    <!-- JSTL libraries -->
    <pathelement location="${dir.lib}/dom.jar" />
    <pathelement location="${dir.lib}/jaxen-full.jar" />
    <pathelement location="${dir.lib}/jaxp-api.jar" />
    <pathelement location="${dir.lib}/jstl.jar" />
    <pathelement location="${dir.lib}/sax.jar" />
    <pathelement location="${dir.lib}/saxpath.jar" />
    <pathelement location="${dir.lib}/standard.jar" />
    <pathelement location="${dir.lib}/xalan.jar" />

    <!-- Include all elements that Tomcat exposes to applications -->
    <pathelement location="${dir.build}/tomcat/common/classes"/>
    <fileset dir="${dir.build}/tomcat/common/endorsed">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${dir.build}/tomcat/common/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${dir.build}/tomcat/shared/classes"/>
    <fileset dir="${dir.build}/tomcat/shared/lib">
      <include name="*.jar"/>
    </fileset>

  </path>


  <target name="init">
    <tstamp />

    <uptodate property="jsp.notRequired"
      targetfile="${dir.tmp}/.tstamp"
      >
      <srcfiles dir="${basedir}/web" includes="**" />
    </uptodate>
  </target>


  <!-- ==================== Clean Target ==================================== -->

  <!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

  -->

  <target name="clean"
    description="Delete old build and dist directories">
    <delete dir="${dir.build}"/>
    <delete dir="${dir.dist}"/>
    <delete dir="${dir.tmp}" />
  </target>



  <!-- ==================== Compile Target ================================== -->

  <!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

  -->
  <target name="compile" depends="prepare,compile.classes,compile.jsp"
    description="Compile Java sources">

    <!-- stuff for subjective scoring app -->
    <mkdir dir="${dir.tmp}/subjective" />
    <mkdir dir="${dir.tmp}/subjective/lib" />
    <jar destfile="${dir.tmp}/subjective/lib/subjective.jar"
      basedir="${dir.web}/WEB-INF/classes"
      index="true"
      />
    <copy todir="${dir.tmp}/subjective/lib">
      <fileset dir="${dir.lib}" />
    </copy>
    <path id="subjective.dist.classpath">
      <path refid="application.classpath" />
      <pathelement location="${dir.lib}/subjective.jar" />
    </path>

    <!-- build scripts -->
    <antcall target="-buildscripts">
      <param name="app.name" value="subjective" />
      <param name="class.main" value="fll.gui.SubjectiveFrame" />
      <param name="-scripts.dir" value="${dir.tmp}/subjective" />
      <param name="-scripts.root" value="." />
      <reference torefid="-scripts.path" refid="subjective.dist.classpath" />
    </antcall>
    
    <zip zipfile="${dir.web}/subjective.zip">
      <zipfileset prefix="subjective" dir="${dir.tmp}/subjective" />
    </zip>
    
    
    <!-- build subjective scripts for testing -->
    <path id="subjective.build.classpath">
      <path refid="application.classpath" />
      <pathelement location="${basedir}/web/WEB-INF/classes" />
    </path>
    <antcall target="-buildscripts">
      <param name="app.name" value="subjective" />
      <param name="class.main" value="fll.gui.SubjectiveFrame" />
      <param name="-scripts.dir" value="${dir.bin}" />
      <param name="-scripts.root" value=".." />
      <reference torefid="-scripts.path" refid="subjective.build.classpath" />
    </antcall>

    <!-- copy libraries over -->
    <copy todir="${dir.build}/lib">
      <fileset dir="${dir.lib}" />
    </copy>

  </target>

  <target name="compile.classes" depends="prepare"
    description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${dir.web}/WEB-INF/classes"/>
    <javac srcdir="src"
      destdir="${dir.web}/WEB-INF/classes"
      debug="${compile.debug}"
      deprecation="${compile.deprecation}"
      optimize="${compile.optimize}"
      >
      <classpath refid="compile.classpath"/>
    </javac>
    
  </target>

  <!-- not perfect, but will work -->
  <target name="compile.jsp" depends="compile.classes"
    description="Compile JSP sources"
    unless="jsp.notRequired"
    >
    
    <mkdir    dir="${dir.tmp}" />
    <!--    <jspc srcdir="web"
    destdir="${dir.tmp}">
    <include name="**/*.jsp" />
    <classpath>
    <pathelement location="${dir.web}/WEB-INF/classes" />
    <path refid="compile.classpath" />
  </classpath>
  </jspc> -->

    <!-- broken with Tomcat 5 for now -->
    <!--    <java classname="org.apache.jasper.JspC"
    fork="yes"
    failonerror="true"
    taskname="jspc"
    dir="${basedir}"
    >
    <classpath>
    <pathelement location="${dir.web}/WEB-INF/classes" />
    <path refid="compile.classpath" />
  </classpath>
    <arg line="-d ${dir.tmp}" />
    <arg line="-die9" />
    <arg line="-webapp ${dir.web}" />
  </java>

    <javac srcdir="${dir.tmp}"
    destdir="${dir.tmp}"
    debug="${compile.debug}"
    deprecation="${compile.deprecation}"
    optimize="${compile.optimize}"
>
    <classpath>
    <pathelement location="${dir.web}/WEB-INF/classes" />
    <path refid="compile.classpath" />
  </classpath>
  </javac> -->

    <!-- still broken, even though this is what Jakarta says to use
    <taskdef classname="org.apache.jasper.JspC" name="jasper2" > 
    <classpath id="jspc.classpath"> 
    <pathelement location="${java.home}/../lib/tools.jar"/> 
    <fileset dir="${dir.tomcat}/bin"> 
    <include name="*.jar"/> 
  </fileset> 
    <fileset dir="${dir.tomcat}/server/lib"> 
    <include name="*.jar"/> 
  </fileset> 
    <fileset dir="${dir.tomcat}/common/lib"> 
    <include name="*.jar"/> 
  </fileset> 
  </classpath> 
  </taskdef> 

    <jasper2 
    validateXml="false" 
    uriroot="${dir.web}" 
    webXmlFragment="${dir.web}/WEB-INF/generated_web.xml" 
    outputDir="${dir.tmp}" /> 

    <javac destdir="${dir.web}/WEB-INF/classes"
    optimize="${compile.optimize}"
    debug="${compile.debug}"
    deprecation="${compile.deprecation}"
    failonerror="true"
    srcdir="${}/WEB-INF/src" 
    excludes="**/*.smap">
    <classpath>
    <path refid="compile.classpath" />
    <pathelement location="${dir.tmp}"/>
    <fileset dir="${dir.web}/WEB-INF/lib">
    <include name="*.jar"/>
  </fileset>
    <pathelement location="${dir.tomcat}/common/classes"/>
    <fileset dir="${tomcat.home}/common/lib">
    <include name="*.jar"/>
  </fileset>
    <pathelement location="${dir.tomcat}/shared/classes"/>
    <fileset dir="${dir.tomcat}/shared/lib">
    <include name="*.jar"/>
  </fileset>
    <fileset dir="${dir.tomcat}/bin"> 
    <include name="*.jar"/> 
  </fileset> 
  </classpath>
    <include name="**" />
    <exclude name="tags/**" />
  </javac> -->
  </target>  


  <!-- ==================== Expand Tomcat Target =================================== -->
  <target name="-tomcat.check">
    <available property="tomcat.uptodate" file="${dir.build}/${tomcat}/bin/startup.sh" />
  </target>

  <target name="tomcat.expand"
    depends="-tomcat.check"
    unless="tomcat.uptodate">
    <untar src="${tomcat}.tar.bz2"
      dest="${dir.build}"
      compression="bzip2"
      />
    <move todir="${dir.build}/tomcat">
      <fileset dir="${dir.build}/${tomcat}"/>
    </move>
    <chmod perm="+x">
      <fileset dir="${dir.build}/tomcat/bin">
        <include name="*.sh"/>
      </fileset>
    </chmod>
  </target>
  

  <!-- ==================== Dist Target ===================================== -->


  <!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.

  -->

  <target name="dist" depends="compile,javadoc"
    description="Create distribution">

    <!-- copy docs -->
    <mkdir dir="${dir.dist}/docs" />
    <copy todir="${dir.dist}/docs">
      <fileset dir="${basedir}/docs" />
    </copy>

    <!-- get the correct web.xml file -->
    <copy file="web/WEB-INF/${dist.web.config}"
      tofile="${dir.web}/WEB-INF/web.xml"
      overwrite="true"
      />

    <!-- Create web application zip file -->
    <zip zipfile="${dir.dist}/web.zip">
      <zipfileset dir="${dir.web}" prefix="${app.name}" />
    </zip>
    
    <copy tofile="${dir.dist}/subjective.zip"
      file="${dir.web}/subjective.zip"/>

      
    <!-- src zip file -->
    <zip zipfile="${dir.dist}/src.zip">
      <zipfileset dir="${basedir}">
        <include name="web/**" />
        <include name="${dir.src}/**" />
        <include name="docs/**" />
        <include name="prj.el" />
        <include name="build.xml" />
        <include name="ChangeLog" />
      </zipfileset>
    </zip>
    
    <zip zipfile="${app.name}-${app.version}.zip">
      <zipfileset dir="${dir.dist}" prefix="${app.name}-${app.version}" />
    </zip>
    
    <delete dir="${dir.tmp}" />
    
    <echo message="The distribution file is ${app.name}-${app.version}.zip" />
    
  </target>



  <!-- ==================== Javadoc Target ================================== -->

  <!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

  -->

  <target name="javadoc"
    description="Create Javadoc API documentation">

    <mkdir dir="${dir.dist}/api"/>
    <javadoc sourcepath="src"
      windowtitle="${app.name}"
      destdir="${dir.dist}/api"
      packagenames="fll.*"
      use="true"
      splitindex="true"
      additionalparam="-tag beaninfo:a:BeanInfo -tag valid:a:Validity -tag feasible:a:Feasibility -tag test:a:Tests -tag pre:cm:PreConditions -tag post:cm:PostConditions -tag invariant:tc:Invariants -breakiterator"
      >
      <classpath>
        <path refid="compile.classpath" />
        <pathelement location="${dir.src}" />
      </classpath>
      
    </javadoc>

  </target>



  <!-- ==================== Prepare Target ================================== -->

  <!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

  -->
  <target name="prepare"
    depends="init,tomcat.expand">

    <!-- Create build directory and copy static content -->
    <mkdir  dir="${dir.web}"/>
    <copy todir="${dir.web}">
      <fileset dir="web">
        <exclude name="**/*.java" />
        <exclude name="**/*.jspf" />
      </fileset>
    </copy>
    <copy todir="${dir.web}">
      <fileset dir="web">
        <include name="**/*.jspf" />
      </fileset>
      <filterset>
        <filter token="APP-VERSION" value="${app.version}" />
      </filterset>
    </copy>
    
    <!-- Copy static files from external dependencies as needed -->
    <copy todir="${dir.web}/WEB-INF/classes">
      <fileset dir="${dir.src}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <copy todir="${dir.web}/WEB-INF/lib">
      <fileset dir="${dir.lib}">
        <include name="**/*.jar" />
      </fileset>
    </copy>

    <!-- get the correct web.xml file -->
    <copy file="web/WEB-INF/${web.config}"
      tofile="${dir.web}/WEB-INF/web.xml"
      overwrite="true"
      />

  </target>

  <target name="test"
    depends="compile,checkstyle.full"
    description="Run any unit tests and the full checkstyle"
    >
    <!-- no unit tests yet -->
  </target>

  <!-- ===================== Checkstyle =================== -->
  <taskdef resource="checkstyletask.properties">
    <classpath>
      <pathelement location="${dir.lib}/ant/antlr-2.7.4.jar" />
      <pathelement location="${dir.lib}/ant/checkstyle-3.5.jar" />
      <pathelement location="${dir.lib}/ant/commons-beanutils.jar" />
      <pathelement location="${dir.lib}/ant/commons-cli-1.0.jar" />
      <pathelement location="${dir.lib}/ant/commons-collections.jar" />
      <pathelement location="${dir.lib}/ant/commons-logging.jar" />
      <pathelement location="${dir.lib}/ant/jakarta-regexp-1.3.jar" />
    </classpath>
  </taskdef>

  <target name="checkstyle"
    description="Check for code convention violations"
    >
    <mkdir dir="${dir.build}/classes" />

    <checkstyle config="checkstyle_checks.xml">
      <fileset dir="${dir.src}">
        <include name="**/*.java" />
      </fileset>
    </checkstyle>
  </target>

  <target name="checkstyle.full"
    description="Check for code convention violations (more aggressive)"
    >
    <mkdir dir="${dir.build}/classes" />

    <checkstyle config="checkstyle_nightly_checks.xml"
      failOnViolation="false"
      >
      <fileset dir="${dir.src}">
        <include name="**/*.java" />
      </fileset>
    </checkstyle>
  </target>

  <!-- ==================== SECONDARY TARGETS ==================== -->
  <!-- build scripts to run the application -->
  <target name="-buildscripts.check">
    <!-- somewhat hokey, in that we only look at one of the scripts generated -->
    <uptodate property="-scripts.uptodate"
      targetfile="${-scripts.dir}/${app.name}.sh">
      <srcfiles dir="${basedir}" includes="run*.t,${ant.file}" />
    </uptodate>
  </target>
  
  <target name="-buildscripts" 
    depends="-buildscripts.check"
    unless="-scripts.uptodate">
    <!-- JavaDOME  -->
    <mkdir dir="${-scripts.dir}" />

    <pathconvert targetos="unix"
      property="classpath.unix"
      refid="-scripts.path">
      <map from="${basedir}" to="${-scripts.root}" />
    </pathconvert>
    <pathconvert targetos="windows"
      property="classpath.windows"
      refid="-scripts.path">
      <map from="${basedir}" to="${-scripts.root}" />
    </pathconvert>

    <copy file="run.sh.t" tofile="${-scripts.dir}/${app.name}.sh" overwrite="true">
      <filterset>
        <filter token="CLASSPATH" value="${classpath.unix}" />
        <filter token="CLASSNAME" value="${class.main}" />
        <filter token="JAVA_ARGS" value="" />
      </filterset>
    </copy>
    <copy file="run.bat.t" tofile="${-scripts.dir}/${app.name}.bat" overwrite="true">
      <filterset>
        <filter token="CLASSPATH" value="${classpath.windows}" />
        <filter token="CLASSNAME" value="${class.main}" />
        <filter token="JAVA_ARGS" value="" />
      </filterset>
    </copy>
    
  </target>
  
</project>
